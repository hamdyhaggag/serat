import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:serat/domain/models/hadith_model.dart';

class BookmarkService {
  static const String _bookmarksKey = 'bookmarked_hadiths';
  List<HadithModel>? _cachedBookmarks;
  bool _isLoading = false;

  Future<List<HadithModel>> getBookmarkedHadiths() async {
    if (_cachedBookmarks != null) {
      return _cachedBookmarks!;
    }

    if (_isLoading) {
      return [];
    }

    _isLoading = true;
    try {
      final prefs = await SharedPreferences.getInstance();
      final bookmarksJson = prefs.getString(_bookmarksKey);

      if (bookmarksJson == null) {
        _cachedBookmarks = [];
        return [];
      }

      final List<dynamic> bookmarksList = json.decode(bookmarksJson);
      _cachedBookmarks =
          bookmarksList.map((item) => HadithModel.fromJson(item)).toList();
      return _cachedBookmarks!;
    } catch (e) {
      print('Error loading bookmarked hadiths: $e');
      return [];
    } finally {
      _isLoading = false;
    }
  }

  Future<void> addBookmark(HadithModel hadith) async {
    try {
      final bookmarks = await getBookmarkedHadiths();
      if (!bookmarks.any((h) => h.id == hadith.id)) {
        bookmarks.add(hadith);
        _cachedBookmarks = bookmarks;
        await _saveBookmarks(bookmarks);
      }
    } catch (e) {
      print('Error adding bookmark: $e');
    }
  }

  Future<void> removeBookmark(HadithModel hadith) async {
    try {
      final bookmarks = await getBookmarkedHadiths();
      bookmarks.removeWhere((h) => h.id == hadith.id);
      _cachedBookmarks = bookmarks;
      await _saveBookmarks(bookmarks);
    } catch (e) {
      print('Error removing bookmark: $e');
    }
  }

  Future<bool> isBookmarked(HadithModel hadith) async {
    try {
      final bookmarks = await getBookmarkedHadiths();
      return bookmarks.any((h) => h.id == hadith.id);
    } catch (e) {
      print('Error checking bookmark status: $e');
      return false;
    }
  }

  Future<void> _saveBookmarks(List<HadithModel> bookmarks) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final bookmarksJson =
          json.encode(bookmarks.map((h) => h.toJson()).toList());
      await prefs.setString(_bookmarksKey, bookmarksJson);
    } catch (e) {
      print('Error saving bookmarks: $e');
    }
  }

  void clearCache() {
    _cachedBookmarks = null;
  }
}
